name: RSS Feed Backend CI/CD

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.1'

jobs:
  # ==================== LINT & FORMAT ====================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pylint isort

      - name: Run Black (formatting check)
        run: black --check app/ tests/
        continue-on-error: true

      - name: Run isort (import sorting check)
        run: isort --check-only app/ tests/
        continue-on-error: true

      - name: Run flake8 (linting)
        run: flake8 app/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        continue-on-error: true

      - name: Run pylint (advanced linting)
        run: pylint app/ --disable=C0111,C0103,R0903 --max-line-length=120
        continue-on-error: true

      - name: Run mypy (type checking)
        run: mypy app/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  # ==================== SECURITY SCAN ====================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Run Bandit (security issues)
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety (dependency vulnerabilities)
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit (CVE scanning)
        run: pip-audit --desc --output pip-audit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  # ==================== UNIT TESTS ====================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up test database
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        run: |
          python scripts/create_tables.py
          python run_preferences_migration.py

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          JWT_SECRET_KEY: test_secret_key_for_ci
          JWT_ALGORITHM: HS256
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junitxml=pytest-report.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-report.xml
            htmlcov/
            coverage.xml
          retention-days: 30

  # ==================== BUILD DOCKER IMAGE ====================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/rss-feed-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rss-feed-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rss-feed-backend:buildcache,mode=max

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  # ==================== DEPLOY TO STAGING ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/staging') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/rss-feed-backend
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --no-deps backend
            docker-compose -f docker-compose.prod.yml exec -T backend python run_preferences_migration.py
            echo "Waiting for health check..."
            sleep 10
            curl -f https://staging-api.example.com/health || exit 1

      - name: Run smoke tests
        run: |
          curl -f https://staging-api.example.com/health
          curl -f https://staging-api.example.com/api/v1/health/db

      - name: Notify deployment
        if: success()
        run: |
          echo "âœ… Staging deployment successful!"
          echo "Environment: staging"
          echo "Commit: ${{ github.sha }}"

  # ==================== DEPLOY TO PRODUCTION ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "Creating database backup..."
            pg_dump $PROD_DB_URL > /backups/pre_deploy_$(date +%Y%m%d_%H%M%S).sql
            echo "Backup created successfully"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/rss-feed-backend
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml run --rm backend python run_preferences_migration.py
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.prod.yml up -d --no-deps --scale backend=2 backend
            sleep 10
            docker-compose -f docker-compose.prod.yml up -d --no-deps --scale backend=1 backend
            
            # Health check
            curl -f https://api.example.com/health || exit 1

      - name: Run smoke tests
        run: |
          curl -f https://api.example.com/health
          curl -f https://api.example.com/api/v1/health/db

      - name: Notify deployment
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "ðŸš€ Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Complete*\nâœ… RSS Feed Backend deployed successfully\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "ðŸš¨ Deployment failed! Rolling back..."
            cd /opt/rss-feed-backend
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            echo "Rollback complete"

  # ==================== POST-DEPLOYMENT TESTS ====================
  integration-tests:
    name: Integration Tests (Post-Deploy)
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install requests pytest

      - name: Run integration tests against staging
        env:
          API_BASE_URL: https://staging-api.example.com
        run: |
          pytest tests/integration/ -v --base-url=$API_BASE_URL

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: integration-test-report.xml
          retention-days: 30
